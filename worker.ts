// worker.ts (Final Working Code - All Fixes Included)

// üö® 1. Imports and Router Initialization
import { Router } from 'itty-router';
const router = Router(); 

// 2. Configuration 
interface Env {
  BOT_TOKEN: string; 
  WEBHOOK_SECRET: string; 
  MAIL_KV: KVNamespace; 
}
// ·ÄÄ·Äª·Ä±·Ä∏·Äá·Ä∞·Ä∏·Äï·Äº·ÄØ·Åç ·Äû·ÄÑ·Ä∑·Ä∫·Åè Domain ·ÄÄ·Ä≠·ÄØ ·Ä§·Äî·Ä±·Äõ·Ä¨·Äê·ÄΩ·ÄÑ·Ä∫ ·ÄÖ·ÄÖ·Ä∫·ÄÜ·Ä±·Ä∏·Äï·Ä´
const TEMP_MAIL_DOMAIN = "kponly.ggff.net"; 
const TELEGRAM_API = (token: string) => `https://api.telegram.org/bot${token}`;

// 3. Function Definitions (const ·Äñ·Äº·ÄÑ·Ä∑·Ä∫ ·Äû·Äê·Ä∫·Äô·Äæ·Äê·Ä∫·Äï·Ä´)

const sendTelegramMessage = async (env: Env, chatId: number, text: string): Promise<void> => {
  const url = `${TELEGRAM_API(env.BOT_TOKEN)}/sendMessage`;
  const response = await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      chat_id: chatId,
      text: text,
      parse_mode: 'Markdown',
    }),
  });

  if (!response.ok) {
    console.error(`Failed to send Telegram message: ${response.status} ${response.statusText}`);
  }
};

const setWebhook = async (env: Env, request: Request): Promise<Response> => {
  const url = `${TELEGRAM_API(env.BOT_TOKEN)}/setWebhook`;
  const webhookUrl = new URL(request.url);
  webhookUrl.pathname = '/webhook';
  
  const response = await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      url: webhookUrl.toString(),
      allowed_updates: ["message"],
      secret_token: env.WEBHOOK_SECRET
    }),
  });

  return new Response(response.ok ? 'Webhook set successfully' : 'Failed to set webhook', { status: response.status });
};

const generateTempMail = async (env: Env, chatId: number): Promise<string> => {
  const length = 8;
  const chars = 'abcdefghijklmnopqrstuvwxyz0123456789';
  let username = '';
  for (let i = 0; i < length; i++) {
    username += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  // ·Äö·Ä¨·Äö·ÄÆ·Ä°·ÄÆ·Ä∏·Äô·Ä±·Ä∏·Äú·Ä∫ ·Äû·ÄÄ·Ä∫·Äê·Äô·Ä∫·Ä∏·ÄÄ·Ä≠·ÄØ ·ÅÉ·ÅÜ·ÅÄ·ÅÄ ·ÄÖ·ÄÄ·Äπ·ÄÄ·Äî·Ä∑·Ä∫ (·ÅÅ ·Äî·Ä¨·Äõ·ÄÆ) ·Äû·Äê·Ä∫·Äô·Äæ·Äê·Ä∫
  await env.MAIL_KV.put(username, chatId.toString(), { expirationTtl: 3600 }); 
  return `${username}@${TEMP_MAIL_DOMAIN}`;
};

const handleTelegramWebhook = async (env: Env, request: Request): Promise<Response> => {
  const secret = request.headers.get('X-Telegram-Bot-Api-Secret-Token');
  if (secret !== env.WEBHOOK_SECRET) {
    return new Response('Unauthorized', { status: 403 });
  }

  try {
    const update = await request.json() as any;

    if (update.message && update.message.text) {
      const chatId = update.message.chat.id;
      const text = update.message.text.trim();

      if (text === '/generate') {
        const tempMail = await generateTempMail(env, chatId);
        const message = `üéâ **Temp Mail Address:** \`${tempMail}\`\n\n` +
                        `·Äí·ÄÆ·Ä°·ÄÆ·Ä∏·Äô·Ä±·Ä∏·Äú·Ä∫·ÄÄ ·Äê·ÄÖ·Ä∫·Äî·Ä¨·Äõ·ÄÆ·ÄÄ·Äº·Ä¨·Ä°·Ä±·Ä¨·ÄÑ·Ä∫ ·Äû·ÄÄ·Ä∫·Äê·Äô·Ä∫·Ä∏·ÄÄ·ÄØ·Äî·Ä∫·ÄÜ·ÄØ·Ä∂·Ä∏·Äï·Ä´·Äô·Äö·Ä∫·Åã`;
        await sendTelegramMessage(env, chatId, message);
      } else if (text === '/start') {
        const message = `üëã Hi! ·Äö·Ä¨·Äö·ÄÆ·Ä°·ÄÆ·Ä∏·Äô·Ä±·Ä∏·Äú·Ä∫ ·Äú·Ä≠·Äï·Ä∫·ÄÖ·Ä¨·Äê·ÄÖ·Ä∫·ÄÅ·ÄØ ·Äñ·Äî·Ä∫·Äê·ÄÆ·Ä∏·Äñ·Ä≠·ÄØ·Ä∑·Ä°·Äê·ÄΩ·ÄÄ·Ä∫ /generate ·Äú·Ä≠·ÄØ·Ä∑ ·Äõ·Ä≠·ÄØ·ÄÄ·Ä∫·Äë·Ää·Ä∑·Ä∫·Äï·Ä´·Åã`;
        await sendTelegramMessage(env, chatId, message);
      }
      return new Response('OK', { status: 200 }); 
    }
    
    return new Response('OK', { status: 200 }); 

  } catch (e) {
    console.error('Webhook Handler Error:', e instanceof Error ? e.message : String(e));
    return new Response('OK (Error handled)', { status: 200 }); 
  }
};


// 4. Router Binding
router
  .post('/webhook', (request, env) => handleTelegramWebhook(env as Env, request))
  .get('/registerWebhook', (request, env) => setWebhook(env as Env, request))
  .all('*', () => new Response('Not Found', { status: 404 }));

// 5. Export Default (Entry Points)
export default {
  fetch: router.handle,

  async email(message: ForwardableEmailMessage, env: Env, ctx: ExecutionContext): Promise<void> {
    try {
        let toEmail: string | null = null;
        
        // 1. message.destination ·ÄÄ·Ä≠·ÄØ ·Ä¶·Ä∏·ÄÖ·Ä¨·Ä∏·Äï·Ä±·Ä∏ ·ÄÖ·ÄÖ·Ä∫·ÄÜ·Ä±·Ä∏·ÄÅ·Äº·ÄÑ·Ä∫·Ä∏
